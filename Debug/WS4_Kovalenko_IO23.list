
WS4_Kovalenko_IO23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08002350  08002350  00003350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024b4  080024b4  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080024b4  080024b4  000034b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024bc  080024bc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024bc  080024bc  000034bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024c0  080024c0  000034c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080024c4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000068  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000708d  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001271  00000000  00000000  0000b0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000628  00000000  00000000  0000c340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004b3  00000000  00000000  0000c968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f2bc  00000000  00000000  0000ce1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000074ea  00000000  00000000  0002c0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bed2a  00000000  00000000  000335c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f22eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001844  00000000  00000000  000f2330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  000f3b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002338 	.word	0x08002338

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002338 	.word	0x08002338

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fae9 	bl	8000ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f949 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f9cf 	bl	80008a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000506:	f000 f9a3 	bl	8000850 <MX_USART3_UART_Init>
  while (1)
  {
      /* USER CODE END WHILE */
      uint8_t command;

      if (HAL_UART_Receive(&huart3, &command, 1, 10) == HAL_OK) {
 800050a:	1df9      	adds	r1, r7, #7
 800050c:	230a      	movs	r3, #10
 800050e:	2201      	movs	r2, #1
 8000510:	4892      	ldr	r0, [pc, #584]	@ (800075c <main+0x268>)
 8000512:	f001 fb1e 	bl	8001b52 <HAL_UART_Receive>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1f6      	bne.n	800050a <main+0x16>
          switch (command) {
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	3b31      	subs	r3, #49	@ 0x31
 8000520:	2b42      	cmp	r3, #66	@ 0x42
 8000522:	f200 8112 	bhi.w	800074a <main+0x256>
 8000526:	a201      	add	r2, pc, #4	@ (adr r2, 800052c <main+0x38>)
 8000528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052c:	08000639 	.word	0x08000639
 8000530:	08000653 	.word	0x08000653
 8000534:	0800066d 	.word	0x0800066d
 8000538:	08000687 	.word	0x08000687
 800053c:	080006a1 	.word	0x080006a1
 8000540:	080006bb 	.word	0x080006bb
 8000544:	080006d5 	.word	0x080006d5
 8000548:	080006ef 	.word	0x080006ef
 800054c:	0800074b 	.word	0x0800074b
 8000550:	0800074b 	.word	0x0800074b
 8000554:	0800074b 	.word	0x0800074b
 8000558:	0800074b 	.word	0x0800074b
 800055c:	0800074b 	.word	0x0800074b
 8000560:	0800074b 	.word	0x0800074b
 8000564:	0800074b 	.word	0x0800074b
 8000568:	0800074b 	.word	0x0800074b
 800056c:	08000709 	.word	0x08000709
 8000570:	0800074b 	.word	0x0800074b
 8000574:	0800074b 	.word	0x0800074b
 8000578:	0800074b 	.word	0x0800074b
 800057c:	0800074b 	.word	0x0800074b
 8000580:	0800074b 	.word	0x0800074b
 8000584:	0800074b 	.word	0x0800074b
 8000588:	0800073d 	.word	0x0800073d
 800058c:	0800074b 	.word	0x0800074b
 8000590:	0800074b 	.word	0x0800074b
 8000594:	0800074b 	.word	0x0800074b
 8000598:	0800074b 	.word	0x0800074b
 800059c:	0800074b 	.word	0x0800074b
 80005a0:	0800074b 	.word	0x0800074b
 80005a4:	0800074b 	.word	0x0800074b
 80005a8:	0800074b 	.word	0x0800074b
 80005ac:	0800074b 	.word	0x0800074b
 80005b0:	0800074b 	.word	0x0800074b
 80005b4:	08000723 	.word	0x08000723
 80005b8:	0800074b 	.word	0x0800074b
 80005bc:	0800074b 	.word	0x0800074b
 80005c0:	0800074b 	.word	0x0800074b
 80005c4:	0800074b 	.word	0x0800074b
 80005c8:	0800074b 	.word	0x0800074b
 80005cc:	0800074b 	.word	0x0800074b
 80005d0:	0800074b 	.word	0x0800074b
 80005d4:	0800074b 	.word	0x0800074b
 80005d8:	0800074b 	.word	0x0800074b
 80005dc:	0800074b 	.word	0x0800074b
 80005e0:	0800074b 	.word	0x0800074b
 80005e4:	0800074b 	.word	0x0800074b
 80005e8:	0800074b 	.word	0x0800074b
 80005ec:	08000709 	.word	0x08000709
 80005f0:	0800074b 	.word	0x0800074b
 80005f4:	0800074b 	.word	0x0800074b
 80005f8:	0800074b 	.word	0x0800074b
 80005fc:	0800074b 	.word	0x0800074b
 8000600:	0800074b 	.word	0x0800074b
 8000604:	0800074b 	.word	0x0800074b
 8000608:	0800073d 	.word	0x0800073d
 800060c:	0800074b 	.word	0x0800074b
 8000610:	0800074b 	.word	0x0800074b
 8000614:	0800074b 	.word	0x0800074b
 8000618:	0800074b 	.word	0x0800074b
 800061c:	0800074b 	.word	0x0800074b
 8000620:	0800074b 	.word	0x0800074b
 8000624:	0800074b 	.word	0x0800074b
 8000628:	0800074b 	.word	0x0800074b
 800062c:	0800074b 	.word	0x0800074b
 8000630:	0800074b 	.word	0x0800074b
 8000634:	08000723 	.word	0x08000723
              case '1':
                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800063e:	4848      	ldr	r0, [pc, #288]	@ (8000760 <main+0x26c>)
 8000640:	f000 fd3a 	bl	80010b8 <HAL_GPIO_WritePin>
                  HAL_UART_Transmit(&huart3, (uint8_t *)"Blue LED ON\r\n", 13, 100);
 8000644:	2364      	movs	r3, #100	@ 0x64
 8000646:	220d      	movs	r2, #13
 8000648:	4946      	ldr	r1, [pc, #280]	@ (8000764 <main+0x270>)
 800064a:	4844      	ldr	r0, [pc, #272]	@ (800075c <main+0x268>)
 800064c:	f001 f9f6 	bl	8001a3c <HAL_UART_Transmit>
                  break;
 8000650:	e082      	b.n	8000758 <main+0x264>
              case '2':
                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000658:	4841      	ldr	r0, [pc, #260]	@ (8000760 <main+0x26c>)
 800065a:	f000 fd2d 	bl	80010b8 <HAL_GPIO_WritePin>
                  HAL_UART_Transmit(&huart3, (uint8_t *)"Blue LED OFF\r\n", 14, 100);
 800065e:	2364      	movs	r3, #100	@ 0x64
 8000660:	220e      	movs	r2, #14
 8000662:	4941      	ldr	r1, [pc, #260]	@ (8000768 <main+0x274>)
 8000664:	483d      	ldr	r0, [pc, #244]	@ (800075c <main+0x268>)
 8000666:	f001 f9e9 	bl	8001a3c <HAL_UART_Transmit>
                  break;
 800066a:	e075      	b.n	8000758 <main+0x264>
              case '3':
                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000672:	483b      	ldr	r0, [pc, #236]	@ (8000760 <main+0x26c>)
 8000674:	f000 fd20 	bl	80010b8 <HAL_GPIO_WritePin>
                  HAL_UART_Transmit(&huart3, (uint8_t *)"Green LED ON\r\n", 14, 100);
 8000678:	2364      	movs	r3, #100	@ 0x64
 800067a:	220e      	movs	r2, #14
 800067c:	493b      	ldr	r1, [pc, #236]	@ (800076c <main+0x278>)
 800067e:	4837      	ldr	r0, [pc, #220]	@ (800075c <main+0x268>)
 8000680:	f001 f9dc 	bl	8001a3c <HAL_UART_Transmit>
                  break;
 8000684:	e068      	b.n	8000758 <main+0x264>
              case '4':
                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800068c:	4834      	ldr	r0, [pc, #208]	@ (8000760 <main+0x26c>)
 800068e:	f000 fd13 	bl	80010b8 <HAL_GPIO_WritePin>
                  HAL_UART_Transmit(&huart3, (uint8_t *)"Green LED OFF\r\n", 15, 100);
 8000692:	2364      	movs	r3, #100	@ 0x64
 8000694:	220f      	movs	r2, #15
 8000696:	4936      	ldr	r1, [pc, #216]	@ (8000770 <main+0x27c>)
 8000698:	4830      	ldr	r0, [pc, #192]	@ (800075c <main+0x268>)
 800069a:	f001 f9cf 	bl	8001a3c <HAL_UART_Transmit>
                  break;
 800069e:	e05b      	b.n	8000758 <main+0x264>
              case '5':
                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a6:	482e      	ldr	r0, [pc, #184]	@ (8000760 <main+0x26c>)
 80006a8:	f000 fd06 	bl	80010b8 <HAL_GPIO_WritePin>
                  HAL_UART_Transmit(&huart3, (uint8_t *)"Red LED ON\r\n", 12, 100);
 80006ac:	2364      	movs	r3, #100	@ 0x64
 80006ae:	220c      	movs	r2, #12
 80006b0:	4930      	ldr	r1, [pc, #192]	@ (8000774 <main+0x280>)
 80006b2:	482a      	ldr	r0, [pc, #168]	@ (800075c <main+0x268>)
 80006b4:	f001 f9c2 	bl	8001a3c <HAL_UART_Transmit>
                  break;
 80006b8:	e04e      	b.n	8000758 <main+0x264>
              case '6':
                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006c0:	4827      	ldr	r0, [pc, #156]	@ (8000760 <main+0x26c>)
 80006c2:	f000 fcf9 	bl	80010b8 <HAL_GPIO_WritePin>
                  HAL_UART_Transmit(&huart3, (uint8_t *)"Red LED OFF\r\n", 13, 100);
 80006c6:	2364      	movs	r3, #100	@ 0x64
 80006c8:	220d      	movs	r2, #13
 80006ca:	492b      	ldr	r1, [pc, #172]	@ (8000778 <main+0x284>)
 80006cc:	4823      	ldr	r0, [pc, #140]	@ (800075c <main+0x268>)
 80006ce:	f001 f9b5 	bl	8001a3c <HAL_UART_Transmit>
                  break;
 80006d2:	e041      	b.n	8000758 <main+0x264>
              case '7':
                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006da:	4821      	ldr	r0, [pc, #132]	@ (8000760 <main+0x26c>)
 80006dc:	f000 fcec 	bl	80010b8 <HAL_GPIO_WritePin>
                  HAL_UART_Transmit(&huart3, (uint8_t *)"Orange LED ON\r\n", 15, 100);
 80006e0:	2364      	movs	r3, #100	@ 0x64
 80006e2:	220f      	movs	r2, #15
 80006e4:	4925      	ldr	r1, [pc, #148]	@ (800077c <main+0x288>)
 80006e6:	481d      	ldr	r0, [pc, #116]	@ (800075c <main+0x268>)
 80006e8:	f001 f9a8 	bl	8001a3c <HAL_UART_Transmit>
                  break;
 80006ec:	e034      	b.n	8000758 <main+0x264>
              case '8':
                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f4:	481a      	ldr	r0, [pc, #104]	@ (8000760 <main+0x26c>)
 80006f6:	f000 fcdf 	bl	80010b8 <HAL_GPIO_WritePin>
                  HAL_UART_Transmit(&huart3, (uint8_t *)"Orange LED OFF\r\n", 16, 100);
 80006fa:	2364      	movs	r3, #100	@ 0x64
 80006fc:	2210      	movs	r2, #16
 80006fe:	4920      	ldr	r1, [pc, #128]	@ (8000780 <main+0x28c>)
 8000700:	4816      	ldr	r0, [pc, #88]	@ (800075c <main+0x268>)
 8000702:	f001 f99b 	bl	8001a3c <HAL_UART_Transmit>
                  break;
 8000706:	e027      	b.n	8000758 <main+0x264>
              case 'a':
              case 'A':
                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800070e:	4814      	ldr	r0, [pc, #80]	@ (8000760 <main+0x26c>)
 8000710:	f000 fcd2 	bl	80010b8 <HAL_GPIO_WritePin>
                  HAL_UART_Transmit(&huart3, (uint8_t *)"All LEDs ON\r\n", 13, 100);
 8000714:	2364      	movs	r3, #100	@ 0x64
 8000716:	220d      	movs	r2, #13
 8000718:	491a      	ldr	r1, [pc, #104]	@ (8000784 <main+0x290>)
 800071a:	4810      	ldr	r0, [pc, #64]	@ (800075c <main+0x268>)
 800071c:	f001 f98e 	bl	8001a3c <HAL_UART_Transmit>
                  break;
 8000720:	e01a      	b.n	8000758 <main+0x264>
              case 's':
              case 'S':
                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000728:	480d      	ldr	r0, [pc, #52]	@ (8000760 <main+0x26c>)
 800072a:	f000 fcc5 	bl	80010b8 <HAL_GPIO_WritePin>
                  HAL_UART_Transmit(&huart3, (uint8_t *)"All LEDs OFF\r\n", 14, 100);
 800072e:	2364      	movs	r3, #100	@ 0x64
 8000730:	220e      	movs	r2, #14
 8000732:	4915      	ldr	r1, [pc, #84]	@ (8000788 <main+0x294>)
 8000734:	4809      	ldr	r0, [pc, #36]	@ (800075c <main+0x268>)
 8000736:	f001 f981 	bl	8001a3c <HAL_UART_Transmit>
                  break;
 800073a:	e00d      	b.n	8000758 <main+0x264>
              case 'h':
              case 'H':
                  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\nCommands:\r\n1-Blue ON, 2-Blue OFF\r\n3-Green ON, 4-Green OFF\r\n5-Red ON, 6-Red OFF\r\n7-Orange ON, 8-Orange OFF\r\nA-All ON, S-All OFF\r\n", 124, 100);
 800073c:	2364      	movs	r3, #100	@ 0x64
 800073e:	227c      	movs	r2, #124	@ 0x7c
 8000740:	4912      	ldr	r1, [pc, #72]	@ (800078c <main+0x298>)
 8000742:	4806      	ldr	r0, [pc, #24]	@ (800075c <main+0x268>)
 8000744:	f001 f97a 	bl	8001a3c <HAL_UART_Transmit>
                  break;
 8000748:	e006      	b.n	8000758 <main+0x264>
              default:
                  HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command! Press H for help\r\n", 35, 100);
 800074a:	2364      	movs	r3, #100	@ 0x64
 800074c:	2223      	movs	r2, #35	@ 0x23
 800074e:	4910      	ldr	r1, [pc, #64]	@ (8000790 <main+0x29c>)
 8000750:	4802      	ldr	r0, [pc, #8]	@ (800075c <main+0x268>)
 8000752:	f001 f973 	bl	8001a3c <HAL_UART_Transmit>
                  break;
 8000756:	bf00      	nop
  {
 8000758:	e6d7      	b.n	800050a <main+0x16>
 800075a:	bf00      	nop
 800075c:	20000028 	.word	0x20000028
 8000760:	40020c00 	.word	0x40020c00
 8000764:	08002350 	.word	0x08002350
 8000768:	08002360 	.word	0x08002360
 800076c:	08002370 	.word	0x08002370
 8000770:	08002380 	.word	0x08002380
 8000774:	08002390 	.word	0x08002390
 8000778:	080023a0 	.word	0x080023a0
 800077c:	080023b0 	.word	0x080023b0
 8000780:	080023c0 	.word	0x080023c0
 8000784:	080023d4 	.word	0x080023d4
 8000788:	080023e4 	.word	0x080023e4
 800078c:	080023f4 	.word	0x080023f4
 8000790:	08002478 	.word	0x08002478

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	@ 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	2230      	movs	r2, #48	@ 0x30
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fd9c 	bl	80022e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	4b22      	ldr	r3, [pc, #136]	@ (8000848 <SystemClock_Config+0xb4>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	4a21      	ldr	r2, [pc, #132]	@ (8000848 <SystemClock_Config+0xb4>)
 80007c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000848 <SystemClock_Config+0xb4>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <SystemClock_Config+0xb8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a1b      	ldr	r2, [pc, #108]	@ (800084c <SystemClock_Config+0xb8>)
 80007de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	4b19      	ldr	r3, [pc, #100]	@ (800084c <SystemClock_Config+0xb8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f0:	2302      	movs	r3, #2
 80007f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	2301      	movs	r3, #1
 80007f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f8:	2310      	movs	r3, #16
 80007fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fc71 	bl	80010ec <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000810:	f000 f87c 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fed4 	bl	80015dc <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800083a:	f000 f867 	bl	800090c <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	@ 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000854:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_USART3_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <MX_USART3_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800085a:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_USART3_UART_Init+0x4c>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_USART3_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_USART3_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_USART3_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_USART3_UART_Init+0x4c>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_USART3_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_USART3_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_USART3_UART_Init+0x4c>)
 8000888:	f001 f888 	bl	800199c <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000892:	f000 f83b 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000028 	.word	0x20000028
 80008a0:	40004800 	.word	0x40004800

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_GPIO_Init+0x60>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c0:	4a10      	ldr	r2, [pc, #64]	@ (8000904 <MX_GPIO_Init+0x60>)
 80008c2:	f043 0308 	orr.w	r3, r3, #8
 80008c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_GPIO_Init+0x60>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008cc:	f003 0308 	and.w	r3, r3, #8
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80008da:	480b      	ldr	r0, [pc, #44]	@ (8000908 <MX_GPIO_Init+0x64>)
 80008dc:	f000 fbec 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008e0:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80008e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4804      	ldr	r0, [pc, #16]	@ (8000908 <MX_GPIO_Init+0x64>)
 80008f8:	f000 fa42 	bl	8000d80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	40020c00 	.word	0x40020c00

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <Error_Handler+0x8>

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <HAL_MspInit+0x4c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000926:	4a0f      	ldr	r2, [pc, #60]	@ (8000964 <HAL_MspInit+0x4c>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800092c:	6453      	str	r3, [r2, #68]	@ 0x44
 800092e:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_MspInit+0x4c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	4a08      	ldr	r2, [pc, #32]	@ (8000964 <HAL_MspInit+0x4c>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000948:	6413      	str	r3, [r2, #64]	@ 0x40
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a19      	ldr	r2, [pc, #100]	@ (80009ec <HAL_UART_MspInit+0x84>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d12c      	bne.n	80009e4 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	4a17      	ldr	r2, [pc, #92]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 8000994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000998:	6413      	str	r3, [r2, #64]	@ 0x40
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009d4:	2307      	movs	r3, #7
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <HAL_UART_MspInit+0x8c>)
 80009e0:	f000 f9ce 	bl	8000d80 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	@ 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40004800 	.word	0x40004800
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020c00 	.word	0x40020c00

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <NMI_Handler+0x4>

08000a00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <MemManage_Handler+0x4>

08000a10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4e:	f000 f891 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	@ (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a80:	f7ff ffea 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	@ (8000abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f001 fc21 	bl	80022f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aae:	f7ff fd21 	bl	80004f4 <main>
  bx  lr    
 8000ab2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ab4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac0:	080024c4 	.word	0x080024c4
  ldr r2, =_sbss
 8000ac4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ac8:	20000074 	.word	0x20000074

08000acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b10 <HAL_Init+0x40>)
 8000ada:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <HAL_Init+0x40>)
 8000ae6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	@ (8000b10 <HAL_Init+0x40>)
 8000af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f90d 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	200f      	movs	r0, #15
 8000b00:	f000 f808 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff ff08 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023c00 	.word	0x40023c00

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <HAL_InitTick+0x54>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <HAL_InitTick+0x58>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f917 	bl	8000d66 <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00e      	b.n	8000b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d80a      	bhi.n	8000b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 f8ed 	bl	8000d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b54:	4a06      	ldr	r2, [pc, #24]	@ (8000b70 <HAL_InitTick+0x5c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000004 	.word	0x20000004

08000b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	@ (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000070 	.word	0x20000070

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	@ (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000070 	.word	0x20000070

08000bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	@ (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	@ (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	@ (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	@ 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	@ 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	@ (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f7ff ff8e 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff47 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff5c 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff8e 	bl	8000c6c <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5d 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffb0 	bl	8000cd4 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	@ 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	e16b      	b.n	8001074 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	f040 815a 	bne.w	800106e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d005      	beq.n	8000dd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d130      	bne.n	8000e34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	68da      	ldr	r2, [r3, #12]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	f003 0201 	and.w	r2, r3, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d017      	beq.n	8000e70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d123      	bne.n	8000ec4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	08da      	lsrs	r2, r3, #3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3208      	adds	r2, #8
 8000e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	220f      	movs	r2, #15
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	691a      	ldr	r2, [r3, #16]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	69b9      	ldr	r1, [r7, #24]
 8000ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0203 	and.w	r2, r3, #3
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f000 80b4 	beq.w	800106e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b60      	ldr	r3, [pc, #384]	@ (800108c <HAL_GPIO_Init+0x30c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a5f      	ldr	r2, [pc, #380]	@ (800108c <HAL_GPIO_Init+0x30c>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b5d      	ldr	r3, [pc, #372]	@ (800108c <HAL_GPIO_Init+0x30c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f22:	4a5b      	ldr	r2, [pc, #364]	@ (8001090 <HAL_GPIO_Init+0x310>)
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a52      	ldr	r2, [pc, #328]	@ (8001094 <HAL_GPIO_Init+0x314>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d02b      	beq.n	8000fa6 <HAL_GPIO_Init+0x226>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a51      	ldr	r2, [pc, #324]	@ (8001098 <HAL_GPIO_Init+0x318>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d025      	beq.n	8000fa2 <HAL_GPIO_Init+0x222>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a50      	ldr	r2, [pc, #320]	@ (800109c <HAL_GPIO_Init+0x31c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d01f      	beq.n	8000f9e <HAL_GPIO_Init+0x21e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4f      	ldr	r2, [pc, #316]	@ (80010a0 <HAL_GPIO_Init+0x320>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d019      	beq.n	8000f9a <HAL_GPIO_Init+0x21a>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4e      	ldr	r2, [pc, #312]	@ (80010a4 <HAL_GPIO_Init+0x324>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x216>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4d      	ldr	r2, [pc, #308]	@ (80010a8 <HAL_GPIO_Init+0x328>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x212>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4c      	ldr	r2, [pc, #304]	@ (80010ac <HAL_GPIO_Init+0x32c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x20e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4b      	ldr	r2, [pc, #300]	@ (80010b0 <HAL_GPIO_Init+0x330>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x20a>
 8000f86:	2307      	movs	r3, #7
 8000f88:	e00e      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f8a:	2308      	movs	r3, #8
 8000f8c:	e00c      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f8e:	2306      	movs	r3, #6
 8000f90:	e00a      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f92:	2305      	movs	r3, #5
 8000f94:	e008      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f96:	2304      	movs	r3, #4
 8000f98:	e006      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e004      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e002      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	69fa      	ldr	r2, [r7, #28]
 8000faa:	f002 0203 	and.w	r2, r2, #3
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	4093      	lsls	r3, r2
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb8:	4935      	ldr	r1, [pc, #212]	@ (8001090 <HAL_GPIO_Init+0x310>)
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fea:	4a32      	ldr	r2, [pc, #200]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff0:	4b30      	ldr	r3, [pc, #192]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001014:	4a27      	ldr	r2, [pc, #156]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800101a:	4b26      	ldr	r3, [pc, #152]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800103e:	4a1d      	ldr	r2, [pc, #116]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001044:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001068:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3301      	adds	r3, #1
 8001072:	61fb      	str	r3, [r7, #28]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	2b0f      	cmp	r3, #15
 8001078:	f67f ae90 	bls.w	8000d9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3724      	adds	r7, #36	@ 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40013800 	.word	0x40013800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020400 	.word	0x40020400
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40021400 	.word	0x40021400
 80010ac:	40021800 	.word	0x40021800
 80010b0:	40021c00 	.word	0x40021c00
 80010b4:	40013c00 	.word	0x40013c00

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d4:	e003      	b.n	80010de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	619a      	str	r2, [r3, #24]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e267      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b00      	cmp	r3, #0
 8001108:	d075      	beq.n	80011f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800110a:	4b88      	ldr	r3, [pc, #544]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	2b04      	cmp	r3, #4
 8001114:	d00c      	beq.n	8001130 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001116:	4b85      	ldr	r3, [pc, #532]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800111e:	2b08      	cmp	r3, #8
 8001120:	d112      	bne.n	8001148 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001122:	4b82      	ldr	r3, [pc, #520]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800112a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800112e:	d10b      	bne.n	8001148 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001130:	4b7e      	ldr	r3, [pc, #504]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d05b      	beq.n	80011f4 <HAL_RCC_OscConfig+0x108>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d157      	bne.n	80011f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e242      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001150:	d106      	bne.n	8001160 <HAL_RCC_OscConfig+0x74>
 8001152:	4b76      	ldr	r3, [pc, #472]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a75      	ldr	r2, [pc, #468]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e01d      	b.n	800119c <HAL_RCC_OscConfig+0xb0>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0x98>
 800116a:	4b70      	ldr	r3, [pc, #448]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a6f      	ldr	r2, [pc, #444]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001170:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b6d      	ldr	r3, [pc, #436]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a6c      	ldr	r2, [pc, #432]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800117c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e00b      	b.n	800119c <HAL_RCC_OscConfig+0xb0>
 8001184:	4b69      	ldr	r3, [pc, #420]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a68      	ldr	r2, [pc, #416]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800118a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b66      	ldr	r3, [pc, #408]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a65      	ldr	r2, [pc, #404]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001196:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800119a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d013      	beq.n	80011cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fcfa 	bl	8000b9c <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fcf6 	bl	8000b9c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	@ 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e207      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	4b5b      	ldr	r3, [pc, #364]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0xc0>
 80011ca:	e014      	b.n	80011f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fce6 	bl	8000b9c <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fce2 	bl	8000b9c <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b64      	cmp	r3, #100	@ 0x64
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e1f3      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	4b51      	ldr	r3, [pc, #324]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0xe8>
 80011f2:	e000      	b.n	80011f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d063      	beq.n	80012ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001202:	4b4a      	ldr	r3, [pc, #296]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00b      	beq.n	8001226 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120e:	4b47      	ldr	r3, [pc, #284]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001216:	2b08      	cmp	r3, #8
 8001218:	d11c      	bne.n	8001254 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121a:	4b44      	ldr	r3, [pc, #272]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d116      	bne.n	8001254 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	4b41      	ldr	r3, [pc, #260]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d005      	beq.n	800123e <HAL_RCC_OscConfig+0x152>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d001      	beq.n	800123e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e1c7      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123e:	4b3b      	ldr	r3, [pc, #236]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4937      	ldr	r1, [pc, #220]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800124e:	4313      	orrs	r3, r2
 8001250:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001252:	e03a      	b.n	80012ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d020      	beq.n	800129e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800125c:	4b34      	ldr	r3, [pc, #208]	@ (8001330 <HAL_RCC_OscConfig+0x244>)
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001262:	f7ff fc9b 	bl	8000b9c <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126a:	f7ff fc97 	bl	8000b9c <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e1a8      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	4b2b      	ldr	r3, [pc, #172]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001288:	4b28      	ldr	r3, [pc, #160]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	4925      	ldr	r1, [pc, #148]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001298:	4313      	orrs	r3, r2
 800129a:	600b      	str	r3, [r1, #0]
 800129c:	e015      	b.n	80012ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129e:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <HAL_RCC_OscConfig+0x244>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a4:	f7ff fc7a 	bl	8000b9c <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ac:	f7ff fc76 	bl	8000b9c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e187      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012be:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d036      	beq.n	8001344 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d016      	beq.n	800130c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <HAL_RCC_OscConfig+0x248>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e4:	f7ff fc5a 	bl	8000b9c <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ec:	f7ff fc56 	bl	8000b9c <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e167      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0x200>
 800130a:	e01b      	b.n	8001344 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800130c:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <HAL_RCC_OscConfig+0x248>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7ff fc43 	bl	8000b9c <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001318:	e00e      	b.n	8001338 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131a:	f7ff fc3f 	bl	8000b9c <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d907      	bls.n	8001338 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e150      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
 800132c:	40023800 	.word	0x40023800
 8001330:	42470000 	.word	0x42470000
 8001334:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001338:	4b88      	ldr	r3, [pc, #544]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 800133a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1ea      	bne.n	800131a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8097 	beq.w	8001480 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001356:	4b81      	ldr	r3, [pc, #516]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10f      	bne.n	8001382 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b7d      	ldr	r3, [pc, #500]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	4a7c      	ldr	r2, [pc, #496]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	@ 0x40
 8001372:	4b7a      	ldr	r3, [pc, #488]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800137e:	2301      	movs	r3, #1
 8001380:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001382:	4b77      	ldr	r3, [pc, #476]	@ (8001560 <HAL_RCC_OscConfig+0x474>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800138a:	2b00      	cmp	r3, #0
 800138c:	d118      	bne.n	80013c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138e:	4b74      	ldr	r3, [pc, #464]	@ (8001560 <HAL_RCC_OscConfig+0x474>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a73      	ldr	r2, [pc, #460]	@ (8001560 <HAL_RCC_OscConfig+0x474>)
 8001394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139a:	f7ff fbff 	bl	8000b9c <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a2:	f7ff fbfb 	bl	8000b9c <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e10c      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001560 <HAL_RCC_OscConfig+0x474>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d106      	bne.n	80013d6 <HAL_RCC_OscConfig+0x2ea>
 80013c8:	4b64      	ldr	r3, [pc, #400]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013cc:	4a63      	ldr	r2, [pc, #396]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80013d4:	e01c      	b.n	8001410 <HAL_RCC_OscConfig+0x324>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b05      	cmp	r3, #5
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x30c>
 80013de:	4b5f      	ldr	r3, [pc, #380]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e2:	4a5e      	ldr	r2, [pc, #376]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ea:	4b5c      	ldr	r3, [pc, #368]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ee:	4a5b      	ldr	r2, [pc, #364]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80013f6:	e00b      	b.n	8001410 <HAL_RCC_OscConfig+0x324>
 80013f8:	4b58      	ldr	r3, [pc, #352]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013fc:	4a57      	ldr	r2, [pc, #348]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013fe:	f023 0301 	bic.w	r3, r3, #1
 8001402:	6713      	str	r3, [r2, #112]	@ 0x70
 8001404:	4b55      	ldr	r3, [pc, #340]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001408:	4a54      	ldr	r2, [pc, #336]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 800140a:	f023 0304 	bic.w	r3, r3, #4
 800140e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d015      	beq.n	8001444 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001418:	f7ff fbc0 	bl	8000b9c <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141e:	e00a      	b.n	8001436 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff fbbc 	bl	8000b9c <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e0cb      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001436:	4b49      	ldr	r3, [pc, #292]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0ee      	beq.n	8001420 <HAL_RCC_OscConfig+0x334>
 8001442:	e014      	b.n	800146e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001444:	f7ff fbaa 	bl	8000b9c <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144a:	e00a      	b.n	8001462 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144c:	f7ff fba6 	bl	8000b9c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e0b5      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001462:	4b3e      	ldr	r3, [pc, #248]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1ee      	bne.n	800144c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d105      	bne.n	8001480 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001474:	4b39      	ldr	r3, [pc, #228]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	4a38      	ldr	r2, [pc, #224]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 800147a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80a1 	beq.w	80015cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800148a:	4b34      	ldr	r3, [pc, #208]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b08      	cmp	r3, #8
 8001494:	d05c      	beq.n	8001550 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d141      	bne.n	8001522 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b31      	ldr	r3, [pc, #196]	@ (8001564 <HAL_RCC_OscConfig+0x478>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb7a 	bl	8000b9c <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff fb76 	bl	8000b9c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e087      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014be:	4b27      	ldr	r3, [pc, #156]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69da      	ldr	r2, [r3, #28]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d8:	019b      	lsls	r3, r3, #6
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e0:	085b      	lsrs	r3, r3, #1
 80014e2:	3b01      	subs	r3, #1
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ec:	061b      	lsls	r3, r3, #24
 80014ee:	491b      	ldr	r1, [pc, #108]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_RCC_OscConfig+0x478>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fb4f 	bl	8000b9c <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff fb4b 	bl	8000b9c <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e05c      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x416>
 8001520:	e054      	b.n	80015cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <HAL_RCC_OscConfig+0x478>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fb38 	bl	8000b9c <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff fb34 	bl	8000b9c <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e045      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x444>
 800154e:	e03d      	b.n	80015cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d107      	bne.n	8001568 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e038      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
 800155c:	40023800 	.word	0x40023800
 8001560:	40007000 	.word	0x40007000
 8001564:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_RCC_OscConfig+0x4ec>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d028      	beq.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001580:	429a      	cmp	r2, r3
 8001582:	d121      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	429a      	cmp	r2, r3
 8001590:	d11a      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001598:	4013      	ands	r3, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800159e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d111      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	3b01      	subs	r3, #1
 80015b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d107      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800

080015dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0cc      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015f0:	4b68      	ldr	r3, [pc, #416]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d90c      	bls.n	8001618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fe:	4b65      	ldr	r3, [pc, #404]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001606:	4b63      	ldr	r3, [pc, #396]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0b8      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001630:	4b59      	ldr	r3, [pc, #356]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	4a58      	ldr	r2, [pc, #352]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800163a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001648:	4b53      	ldr	r3, [pc, #332]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	4a52      	ldr	r2, [pc, #328]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001654:	4b50      	ldr	r3, [pc, #320]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	494d      	ldr	r1, [pc, #308]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d044      	beq.n	80016fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d107      	bne.n	800168a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	4b47      	ldr	r3, [pc, #284]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d119      	bne.n	80016ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e07f      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d003      	beq.n	800169a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001696:	2b03      	cmp	r3, #3
 8001698:	d107      	bne.n	80016aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169a:	4b3f      	ldr	r3, [pc, #252]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e06f      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e067      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ba:	4b37      	ldr	r3, [pc, #220]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f023 0203 	bic.w	r2, r3, #3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4934      	ldr	r1, [pc, #208]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016cc:	f7ff fa66 	bl	8000b9c <HAL_GetTick>
 80016d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d2:	e00a      	b.n	80016ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d4:	f7ff fa62 	bl	8000b9c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e04f      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 020c 	and.w	r2, r3, #12
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d1eb      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016fc:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d20c      	bcs.n	8001724 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e032      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d008      	beq.n	8001742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001730:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	4916      	ldr	r1, [pc, #88]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	4313      	orrs	r3, r2
 8001740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d009      	beq.n	8001762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800174e:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	490e      	ldr	r1, [pc, #56]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	4313      	orrs	r3, r2
 8001760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001762:	f000 f821 	bl	80017a8 <HAL_RCC_GetSysClockFreq>
 8001766:	4602      	mov	r2, r0
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	490a      	ldr	r1, [pc, #40]	@ (800179c <HAL_RCC_ClockConfig+0x1c0>)
 8001774:	5ccb      	ldrb	r3, [r1, r3]
 8001776:	fa22 f303 	lsr.w	r3, r2, r3
 800177a:	4a09      	ldr	r2, [pc, #36]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff f9c6 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023c00 	.word	0x40023c00
 8001798:	40023800 	.word	0x40023800
 800179c:	0800249c 	.word	0x0800249c
 80017a0:	20000000 	.word	0x20000000
 80017a4:	20000004 	.word	0x20000004

080017a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017ac:	b090      	sub	sp, #64	@ 0x40
 80017ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c0:	4b59      	ldr	r3, [pc, #356]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x180>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d00d      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x40>
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	f200 80a1 	bhi.w	8001914 <HAL_RCC_GetSysClockFreq+0x16c>
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0x34>
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80017da:	e09b      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017dc:	4b53      	ldr	r3, [pc, #332]	@ (800192c <HAL_RCC_GetSysClockFreq+0x184>)
 80017de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017e0:	e09b      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e2:	4b53      	ldr	r3, [pc, #332]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x188>)
 80017e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017e6:	e098      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x180>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d028      	beq.n	8001850 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x180>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	099b      	lsrs	r3, r3, #6
 8001804:	2200      	movs	r2, #0
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	627a      	str	r2, [r7, #36]	@ 0x24
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001810:	2100      	movs	r1, #0
 8001812:	4b47      	ldr	r3, [pc, #284]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x188>)
 8001814:	fb03 f201 	mul.w	r2, r3, r1
 8001818:	2300      	movs	r3, #0
 800181a:	fb00 f303 	mul.w	r3, r0, r3
 800181e:	4413      	add	r3, r2
 8001820:	4a43      	ldr	r2, [pc, #268]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x188>)
 8001822:	fba0 1202 	umull	r1, r2, r0, r2
 8001826:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001828:	460a      	mov	r2, r1
 800182a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800182c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800182e:	4413      	add	r3, r2
 8001830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001834:	2200      	movs	r2, #0
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	61fa      	str	r2, [r7, #28]
 800183a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800183e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001842:	f7fe fcc1 	bl	80001c8 <__aeabi_uldivmod>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4613      	mov	r3, r2
 800184c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800184e:	e053      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001850:	4b35      	ldr	r3, [pc, #212]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x180>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	099b      	lsrs	r3, r3, #6
 8001856:	2200      	movs	r2, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	617a      	str	r2, [r7, #20]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001862:	f04f 0b00 	mov.w	fp, #0
 8001866:	4652      	mov	r2, sl
 8001868:	465b      	mov	r3, fp
 800186a:	f04f 0000 	mov.w	r0, #0
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	0159      	lsls	r1, r3, #5
 8001874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001878:	0150      	lsls	r0, r2, #5
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	ebb2 080a 	subs.w	r8, r2, sl
 8001882:	eb63 090b 	sbc.w	r9, r3, fp
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001892:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001896:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800189a:	ebb2 0408 	subs.w	r4, r2, r8
 800189e:	eb63 0509 	sbc.w	r5, r3, r9
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	00eb      	lsls	r3, r5, #3
 80018ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018b0:	00e2      	lsls	r2, r4, #3
 80018b2:	4614      	mov	r4, r2
 80018b4:	461d      	mov	r5, r3
 80018b6:	eb14 030a 	adds.w	r3, r4, sl
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	eb45 030b 	adc.w	r3, r5, fp
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ce:	4629      	mov	r1, r5
 80018d0:	028b      	lsls	r3, r1, #10
 80018d2:	4621      	mov	r1, r4
 80018d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018d8:	4621      	mov	r1, r4
 80018da:	028a      	lsls	r2, r1, #10
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018e2:	2200      	movs	r2, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	60fa      	str	r2, [r7, #12]
 80018e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018ec:	f7fe fc6c 	bl	80001c8 <__aeabi_uldivmod>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4613      	mov	r3, r2
 80018f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x180>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	3301      	adds	r3, #1
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001908:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800190a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800190c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001910:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001912:	e002      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001914:	4b05      	ldr	r3, [pc, #20]	@ (800192c <HAL_RCC_GetSysClockFreq+0x184>)
 8001916:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800191c:	4618      	mov	r0, r3
 800191e:	3740      	adds	r7, #64	@ 0x40
 8001920:	46bd      	mov	sp, r7
 8001922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800
 800192c:	00f42400 	.word	0x00f42400
 8001930:	017d7840 	.word	0x017d7840

08001934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001938:	4b03      	ldr	r3, [pc, #12]	@ (8001948 <HAL_RCC_GetHCLKFreq+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000

0800194c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001950:	f7ff fff0 	bl	8001934 <HAL_RCC_GetHCLKFreq>
 8001954:	4602      	mov	r2, r0
 8001956:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	0a9b      	lsrs	r3, r3, #10
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	4903      	ldr	r1, [pc, #12]	@ (8001970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001962:	5ccb      	ldrb	r3, [r1, r3]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	080024ac 	.word	0x080024ac

08001974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001978:	f7ff ffdc 	bl	8001934 <HAL_RCC_GetHCLKFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	0b5b      	lsrs	r3, r3, #13
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4903      	ldr	r1, [pc, #12]	@ (8001998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	080024ac 	.word	0x080024ac

0800199c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e042      	b.n	8001a34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d106      	bne.n	80019c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7fe ffd0 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2224      	movs	r2, #36	@ 0x24
 80019cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fa09 	bl	8001df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80019f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2220      	movs	r2, #32
 8001a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	@ 0x28
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b20      	cmp	r3, #32
 8001a5a:	d175      	bne.n	8001b48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <HAL_UART_Transmit+0x2c>
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e06e      	b.n	8001b4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2221      	movs	r2, #33	@ 0x21
 8001a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a7a:	f7ff f88f 	bl	8000b9c <HAL_GetTick>
 8001a7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	88fa      	ldrh	r2, [r7, #6]
 8001a84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	88fa      	ldrh	r2, [r7, #6]
 8001a8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a94:	d108      	bne.n	8001aa8 <HAL_UART_Transmit+0x6c>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d104      	bne.n	8001aa8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	e003      	b.n	8001ab0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ab0:	e02e      	b.n	8001b10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2180      	movs	r1, #128	@ 0x80
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 f8df 	bl	8001c80 <UART_WaitOnFlagUntilTimeout>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2220      	movs	r2, #32
 8001acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e03a      	b.n	8001b4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10b      	bne.n	8001af2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ae8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	3302      	adds	r3, #2
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	e007      	b.n	8001b02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	3301      	adds	r3, #1
 8001b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1cb      	bne.n	8001ab2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2200      	movs	r2, #0
 8001b22:	2140      	movs	r1, #64	@ 0x40
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f8ab 	bl	8001c80 <UART_WaitOnFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e006      	b.n	8001b4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e000      	b.n	8001b4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001b48:	2302      	movs	r3, #2
  }
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b08a      	sub	sp, #40	@ 0x28
 8001b56:	af02      	add	r7, sp, #8
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b20      	cmp	r3, #32
 8001b70:	f040 8081 	bne.w	8001c76 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <HAL_UART_Receive+0x2e>
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e079      	b.n	8001c78 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2222      	movs	r2, #34	@ 0x22
 8001b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b98:	f7ff f800 	bl	8000b9c <HAL_GetTick>
 8001b9c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	88fa      	ldrh	r2, [r7, #6]
 8001ba2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	88fa      	ldrh	r2, [r7, #6]
 8001ba8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bb2:	d108      	bne.n	8001bc6 <HAL_UART_Receive+0x74>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d104      	bne.n	8001bc6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	61bb      	str	r3, [r7, #24]
 8001bc4:	e003      	b.n	8001bce <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001bce:	e047      	b.n	8001c60 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2120      	movs	r1, #32
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 f850 	bl	8001c80 <UART_WaitOnFlagUntilTimeout>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2220      	movs	r2, #32
 8001bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e042      	b.n	8001c78 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10c      	bne.n	8001c12 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	e01f      	b.n	8001c52 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c1a:	d007      	beq.n	8001c2c <HAL_UART_Receive+0xda>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10a      	bne.n	8001c3a <HAL_UART_Receive+0xe8>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d106      	bne.n	8001c3a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	e008      	b.n	8001c4c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1b2      	bne.n	8001bd0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001c76:	2302      	movs	r3, #2
  }
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c90:	e03b      	b.n	8001d0a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c98:	d037      	beq.n	8001d0a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c9a:	f7fe ff7f 	bl	8000b9c <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	6a3a      	ldr	r2, [r7, #32]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d302      	bcc.n	8001cb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e03a      	b.n	8001d2a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d023      	beq.n	8001d0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b80      	cmp	r3, #128	@ 0x80
 8001cc6:	d020      	beq.n	8001d0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b40      	cmp	r3, #64	@ 0x40
 8001ccc:	d01d      	beq.n	8001d0a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d116      	bne.n	8001d0a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f81d 	bl	8001d32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2208      	movs	r2, #8
 8001cfc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4013      	ands	r3, r2
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	bf0c      	ite	eq
 8001d1a:	2301      	moveq	r3, #1
 8001d1c:	2300      	movne	r3, #0
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d0b4      	beq.n	8001c92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b095      	sub	sp, #84	@ 0x54
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	330c      	adds	r3, #12
 8001d40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d44:	e853 3f00 	ldrex	r3, [r3]
 8001d48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	330c      	adds	r3, #12
 8001d58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d5a:	643a      	str	r2, [r7, #64]	@ 0x40
 8001d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001d60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d62:	e841 2300 	strex	r3, r2, [r1]
 8001d66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1e5      	bne.n	8001d3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	3314      	adds	r3, #20
 8001d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	e853 3f00 	ldrex	r3, [r3]
 8001d7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3314      	adds	r3, #20
 8001d8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d96:	e841 2300 	strex	r3, r2, [r1]
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1e5      	bne.n	8001d6e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d119      	bne.n	8001dde <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	330c      	adds	r3, #12
 8001db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	e853 3f00 	ldrex	r3, [r3]
 8001db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	f023 0310 	bic.w	r3, r3, #16
 8001dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	330c      	adds	r3, #12
 8001dc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001dca:	61ba      	str	r2, [r7, #24]
 8001dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dce:	6979      	ldr	r1, [r7, #20]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	e841 2300 	strex	r3, r2, [r1]
 8001dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1e5      	bne.n	8001daa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2220      	movs	r2, #32
 8001de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001dec:	bf00      	nop
 8001dee:	3754      	adds	r7, #84	@ 0x54
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dfc:	b0c0      	sub	sp, #256	@ 0x100
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e14:	68d9      	ldr	r1, [r3, #12]
 8001e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	ea40 0301 	orr.w	r3, r0, r1
 8001e20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001e50:	f021 010c 	bic.w	r1, r1, #12
 8001e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001e5e:	430b      	orrs	r3, r1
 8001e60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e72:	6999      	ldr	r1, [r3, #24]
 8001e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	ea40 0301 	orr.w	r3, r0, r1
 8001e7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4b8f      	ldr	r3, [pc, #572]	@ (80020c4 <UART_SetConfig+0x2cc>)
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d005      	beq.n	8001e98 <UART_SetConfig+0xa0>
 8001e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4b8d      	ldr	r3, [pc, #564]	@ (80020c8 <UART_SetConfig+0x2d0>)
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d104      	bne.n	8001ea2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e98:	f7ff fd6c 	bl	8001974 <HAL_RCC_GetPCLK2Freq>
 8001e9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001ea0:	e003      	b.n	8001eaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ea2:	f7ff fd53 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8001ea6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001eb4:	f040 810c 	bne.w	80020d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001ec2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001ec6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001eca:	4622      	mov	r2, r4
 8001ecc:	462b      	mov	r3, r5
 8001ece:	1891      	adds	r1, r2, r2
 8001ed0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001ed2:	415b      	adcs	r3, r3
 8001ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ed6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001eda:	4621      	mov	r1, r4
 8001edc:	eb12 0801 	adds.w	r8, r2, r1
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	eb43 0901 	adc.w	r9, r3, r1
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001efa:	4690      	mov	r8, r2
 8001efc:	4699      	mov	r9, r3
 8001efe:	4623      	mov	r3, r4
 8001f00:	eb18 0303 	adds.w	r3, r8, r3
 8001f04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001f08:	462b      	mov	r3, r5
 8001f0a:	eb49 0303 	adc.w	r3, r9, r3
 8001f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001f1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001f22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001f26:	460b      	mov	r3, r1
 8001f28:	18db      	adds	r3, r3, r3
 8001f2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	eb42 0303 	adc.w	r3, r2, r3
 8001f32:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001f3c:	f7fe f944 	bl	80001c8 <__aeabi_uldivmod>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4b61      	ldr	r3, [pc, #388]	@ (80020cc <UART_SetConfig+0x2d4>)
 8001f46:	fba3 2302 	umull	r2, r3, r3, r2
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	011c      	lsls	r4, r3, #4
 8001f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f52:	2200      	movs	r2, #0
 8001f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001f5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001f60:	4642      	mov	r2, r8
 8001f62:	464b      	mov	r3, r9
 8001f64:	1891      	adds	r1, r2, r2
 8001f66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001f68:	415b      	adcs	r3, r3
 8001f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f70:	4641      	mov	r1, r8
 8001f72:	eb12 0a01 	adds.w	sl, r2, r1
 8001f76:	4649      	mov	r1, r9
 8001f78:	eb43 0b01 	adc.w	fp, r3, r1
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f90:	4692      	mov	sl, r2
 8001f92:	469b      	mov	fp, r3
 8001f94:	4643      	mov	r3, r8
 8001f96:	eb1a 0303 	adds.w	r3, sl, r3
 8001f9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001f9e:	464b      	mov	r3, r9
 8001fa0:	eb4b 0303 	adc.w	r3, fp, r3
 8001fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001fb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001fb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	18db      	adds	r3, r3, r3
 8001fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	eb42 0303 	adc.w	r3, r2, r3
 8001fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001fce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001fd2:	f7fe f8f9 	bl	80001c8 <__aeabi_uldivmod>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80020cc <UART_SetConfig+0x2d4>)
 8001fde:	fba3 2301 	umull	r2, r3, r3, r1
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	2264      	movs	r2, #100	@ 0x64
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	1acb      	subs	r3, r1, r3
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001ff2:	4b36      	ldr	r3, [pc, #216]	@ (80020cc <UART_SetConfig+0x2d4>)
 8001ff4:	fba3 2302 	umull	r2, r3, r3, r2
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002000:	441c      	add	r4, r3
 8002002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002006:	2200      	movs	r2, #0
 8002008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800200c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002010:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002014:	4642      	mov	r2, r8
 8002016:	464b      	mov	r3, r9
 8002018:	1891      	adds	r1, r2, r2
 800201a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800201c:	415b      	adcs	r3, r3
 800201e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002020:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002024:	4641      	mov	r1, r8
 8002026:	1851      	adds	r1, r2, r1
 8002028:	6339      	str	r1, [r7, #48]	@ 0x30
 800202a:	4649      	mov	r1, r9
 800202c:	414b      	adcs	r3, r1
 800202e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800203c:	4659      	mov	r1, fp
 800203e:	00cb      	lsls	r3, r1, #3
 8002040:	4651      	mov	r1, sl
 8002042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002046:	4651      	mov	r1, sl
 8002048:	00ca      	lsls	r2, r1, #3
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	4603      	mov	r3, r0
 8002050:	4642      	mov	r2, r8
 8002052:	189b      	adds	r3, r3, r2
 8002054:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002058:	464b      	mov	r3, r9
 800205a:	460a      	mov	r2, r1
 800205c:	eb42 0303 	adc.w	r3, r2, r3
 8002060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002070:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002074:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002078:	460b      	mov	r3, r1
 800207a:	18db      	adds	r3, r3, r3
 800207c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800207e:	4613      	mov	r3, r2
 8002080:	eb42 0303 	adc.w	r3, r2, r3
 8002084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002086:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800208a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800208e:	f7fe f89b 	bl	80001c8 <__aeabi_uldivmod>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <UART_SetConfig+0x2d4>)
 8002098:	fba3 1302 	umull	r1, r3, r3, r2
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	2164      	movs	r1, #100	@ 0x64
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	3332      	adds	r3, #50	@ 0x32
 80020aa:	4a08      	ldr	r2, [pc, #32]	@ (80020cc <UART_SetConfig+0x2d4>)
 80020ac:	fba2 2303 	umull	r2, r3, r2, r3
 80020b0:	095b      	lsrs	r3, r3, #5
 80020b2:	f003 0207 	and.w	r2, r3, #7
 80020b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4422      	add	r2, r4
 80020be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80020c0:	e106      	b.n	80022d0 <UART_SetConfig+0x4d8>
 80020c2:	bf00      	nop
 80020c4:	40011000 	.word	0x40011000
 80020c8:	40011400 	.word	0x40011400
 80020cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020d4:	2200      	movs	r2, #0
 80020d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80020da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80020de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80020e2:	4642      	mov	r2, r8
 80020e4:	464b      	mov	r3, r9
 80020e6:	1891      	adds	r1, r2, r2
 80020e8:	6239      	str	r1, [r7, #32]
 80020ea:	415b      	adcs	r3, r3
 80020ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020f2:	4641      	mov	r1, r8
 80020f4:	1854      	adds	r4, r2, r1
 80020f6:	4649      	mov	r1, r9
 80020f8:	eb43 0501 	adc.w	r5, r3, r1
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	00eb      	lsls	r3, r5, #3
 8002106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800210a:	00e2      	lsls	r2, r4, #3
 800210c:	4614      	mov	r4, r2
 800210e:	461d      	mov	r5, r3
 8002110:	4643      	mov	r3, r8
 8002112:	18e3      	adds	r3, r4, r3
 8002114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002118:	464b      	mov	r3, r9
 800211a:	eb45 0303 	adc.w	r3, r5, r3
 800211e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800212e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800213e:	4629      	mov	r1, r5
 8002140:	008b      	lsls	r3, r1, #2
 8002142:	4621      	mov	r1, r4
 8002144:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002148:	4621      	mov	r1, r4
 800214a:	008a      	lsls	r2, r1, #2
 800214c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002150:	f7fe f83a 	bl	80001c8 <__aeabi_uldivmod>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4b60      	ldr	r3, [pc, #384]	@ (80022dc <UART_SetConfig+0x4e4>)
 800215a:	fba3 2302 	umull	r2, r3, r3, r2
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	011c      	lsls	r4, r3, #4
 8002162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002166:	2200      	movs	r2, #0
 8002168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800216c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002170:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002174:	4642      	mov	r2, r8
 8002176:	464b      	mov	r3, r9
 8002178:	1891      	adds	r1, r2, r2
 800217a:	61b9      	str	r1, [r7, #24]
 800217c:	415b      	adcs	r3, r3
 800217e:	61fb      	str	r3, [r7, #28]
 8002180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002184:	4641      	mov	r1, r8
 8002186:	1851      	adds	r1, r2, r1
 8002188:	6139      	str	r1, [r7, #16]
 800218a:	4649      	mov	r1, r9
 800218c:	414b      	adcs	r3, r1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800219c:	4659      	mov	r1, fp
 800219e:	00cb      	lsls	r3, r1, #3
 80021a0:	4651      	mov	r1, sl
 80021a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021a6:	4651      	mov	r1, sl
 80021a8:	00ca      	lsls	r2, r1, #3
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	4603      	mov	r3, r0
 80021b0:	4642      	mov	r2, r8
 80021b2:	189b      	adds	r3, r3, r2
 80021b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80021b8:	464b      	mov	r3, r9
 80021ba:	460a      	mov	r2, r1
 80021bc:	eb42 0303 	adc.w	r3, r2, r3
 80021c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80021c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80021ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80021dc:	4649      	mov	r1, r9
 80021de:	008b      	lsls	r3, r1, #2
 80021e0:	4641      	mov	r1, r8
 80021e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021e6:	4641      	mov	r1, r8
 80021e8:	008a      	lsls	r2, r1, #2
 80021ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80021ee:	f7fd ffeb 	bl	80001c8 <__aeabi_uldivmod>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4611      	mov	r1, r2
 80021f8:	4b38      	ldr	r3, [pc, #224]	@ (80022dc <UART_SetConfig+0x4e4>)
 80021fa:	fba3 2301 	umull	r2, r3, r3, r1
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2264      	movs	r2, #100	@ 0x64
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	1acb      	subs	r3, r1, r3
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	3332      	adds	r3, #50	@ 0x32
 800220c:	4a33      	ldr	r2, [pc, #204]	@ (80022dc <UART_SetConfig+0x4e4>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002218:	441c      	add	r4, r3
 800221a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800221e:	2200      	movs	r2, #0
 8002220:	673b      	str	r3, [r7, #112]	@ 0x70
 8002222:	677a      	str	r2, [r7, #116]	@ 0x74
 8002224:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002228:	4642      	mov	r2, r8
 800222a:	464b      	mov	r3, r9
 800222c:	1891      	adds	r1, r2, r2
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	415b      	adcs	r3, r3
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002238:	4641      	mov	r1, r8
 800223a:	1851      	adds	r1, r2, r1
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	4649      	mov	r1, r9
 8002240:	414b      	adcs	r3, r1
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002250:	4659      	mov	r1, fp
 8002252:	00cb      	lsls	r3, r1, #3
 8002254:	4651      	mov	r1, sl
 8002256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800225a:	4651      	mov	r1, sl
 800225c:	00ca      	lsls	r2, r1, #3
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	4603      	mov	r3, r0
 8002264:	4642      	mov	r2, r8
 8002266:	189b      	adds	r3, r3, r2
 8002268:	66bb      	str	r3, [r7, #104]	@ 0x68
 800226a:	464b      	mov	r3, r9
 800226c:	460a      	mov	r2, r1
 800226e:	eb42 0303 	adc.w	r3, r2, r3
 8002272:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	663b      	str	r3, [r7, #96]	@ 0x60
 800227e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800228c:	4649      	mov	r1, r9
 800228e:	008b      	lsls	r3, r1, #2
 8002290:	4641      	mov	r1, r8
 8002292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002296:	4641      	mov	r1, r8
 8002298:	008a      	lsls	r2, r1, #2
 800229a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800229e:	f7fd ff93 	bl	80001c8 <__aeabi_uldivmod>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4b0d      	ldr	r3, [pc, #52]	@ (80022dc <UART_SetConfig+0x4e4>)
 80022a8:	fba3 1302 	umull	r1, r3, r3, r2
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	2164      	movs	r1, #100	@ 0x64
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	3332      	adds	r3, #50	@ 0x32
 80022ba:	4a08      	ldr	r2, [pc, #32]	@ (80022dc <UART_SetConfig+0x4e4>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	f003 020f 	and.w	r2, r3, #15
 80022c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4422      	add	r2, r4
 80022ce:	609a      	str	r2, [r3, #8]
}
 80022d0:	bf00      	nop
 80022d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80022d6:	46bd      	mov	sp, r7
 80022d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022dc:	51eb851f 	.word	0x51eb851f

080022e0 <memset>:
 80022e0:	4402      	add	r2, r0
 80022e2:	4603      	mov	r3, r0
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d100      	bne.n	80022ea <memset+0xa>
 80022e8:	4770      	bx	lr
 80022ea:	f803 1b01 	strb.w	r1, [r3], #1
 80022ee:	e7f9      	b.n	80022e4 <memset+0x4>

080022f0 <__libc_init_array>:
 80022f0:	b570      	push	{r4, r5, r6, lr}
 80022f2:	4d0d      	ldr	r5, [pc, #52]	@ (8002328 <__libc_init_array+0x38>)
 80022f4:	4c0d      	ldr	r4, [pc, #52]	@ (800232c <__libc_init_array+0x3c>)
 80022f6:	1b64      	subs	r4, r4, r5
 80022f8:	10a4      	asrs	r4, r4, #2
 80022fa:	2600      	movs	r6, #0
 80022fc:	42a6      	cmp	r6, r4
 80022fe:	d109      	bne.n	8002314 <__libc_init_array+0x24>
 8002300:	4d0b      	ldr	r5, [pc, #44]	@ (8002330 <__libc_init_array+0x40>)
 8002302:	4c0c      	ldr	r4, [pc, #48]	@ (8002334 <__libc_init_array+0x44>)
 8002304:	f000 f818 	bl	8002338 <_init>
 8002308:	1b64      	subs	r4, r4, r5
 800230a:	10a4      	asrs	r4, r4, #2
 800230c:	2600      	movs	r6, #0
 800230e:	42a6      	cmp	r6, r4
 8002310:	d105      	bne.n	800231e <__libc_init_array+0x2e>
 8002312:	bd70      	pop	{r4, r5, r6, pc}
 8002314:	f855 3b04 	ldr.w	r3, [r5], #4
 8002318:	4798      	blx	r3
 800231a:	3601      	adds	r6, #1
 800231c:	e7ee      	b.n	80022fc <__libc_init_array+0xc>
 800231e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002322:	4798      	blx	r3
 8002324:	3601      	adds	r6, #1
 8002326:	e7f2      	b.n	800230e <__libc_init_array+0x1e>
 8002328:	080024bc 	.word	0x080024bc
 800232c:	080024bc 	.word	0x080024bc
 8002330:	080024bc 	.word	0x080024bc
 8002334:	080024c0 	.word	0x080024c0

08002338 <_init>:
 8002338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233a:	bf00      	nop
 800233c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233e:	bc08      	pop	{r3}
 8002340:	469e      	mov	lr, r3
 8002342:	4770      	bx	lr

08002344 <_fini>:
 8002344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002346:	bf00      	nop
 8002348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800234a:	bc08      	pop	{r3}
 800234c:	469e      	mov	lr, r3
 800234e:	4770      	bx	lr
